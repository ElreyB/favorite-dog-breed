{"version":3,"sources":["utils/upperCaseName.js","components/Search/Search.js","utils/API.js","components/Card/Card.js","components/Favorites/Favorites.js","App.js","utils/getRandomIndex.js","serviceWorker.js","index.js"],"names":["upperCaseName","str","toUpperCase","slice","Wrapper","styled","div","Label","label","Select","select","Form","form","Button","button","Search","query","onChange","breeds","randomBreed","forhtml","id","value","map","breed","index","key","type","onClick","axios","get","ImageWrapper","Img","img","Card","message","name","image","src","alt","Favorites","favBreeds","inList","Section","section","Panel","P","p","App","useState","setQuery","setBreeds","setFavBreeds","useEffect","API","then","data","breedsArr","Object","keys","addToFavs","filter","length","e","breedName","target","min","max","randomIndex","Math","ceil","floor","random","updateFavs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1d515f74.chunk.js","sourcesContent":["export default function upperCaseName(str) {\n  return str[0]?.toUpperCase() + str.slice(1);\n}\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { string, func, arrayOf } from \"prop-types\";\nimport upperCaseName from \"../../utils/upperCaseName\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding: 25px;\n  background-color: dodgerblue;\n  margin-bottom: 10px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 10px;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  height: 30px;\n  font-size: 16px;\n`;\n\nconst Form = styled.form`\n  margin-bottom: 10px;\n`;\n\nconst Button = styled.button`\n  padding: 10px 5px;\n  border: 2px solid;\n  font-size: 16px;\n`;\n\nexport default function Search({ query, onChange, breeds, randomBreed }) {\n  return (\n    <Wrapper>\n      <Form>\n        <Label forhtml=\"breeds\">\n          Select a breed and add it to your favorites list\n        </Label>\n\n        <Select id=\"breeds\" onChange={onChange} value={query}>\n          <option value=\"\">Select a Breed</option>\n          {breeds?.map((breed, index) => (\n            <option value={breed} key={index}>\n              {upperCaseName(breed)}\n            </option>\n          ))}\n        </Select>\n      </Form>\n      <Button type=\"button\" onClick={randomBreed}>\n        Pick Random Breed\n      </Button>\n    </Wrapper>\n  );\n}\n\nSearch.propTypes = {\n  query: string.isRequired,\n  onChange: func.isRequired,\n  breeds: arrayOf(string).isRequired,\n  randomBreed: func.isRequired,\n};\n","import axios from \"axios\";\n\nexport default {\n  getBreeds() {\n    return axios.get(\"https://dog.ceo/api/breeds/list/all\");\n  },\n  getBreed(query) {\n    return axios.get(`https://dog.ceo/api/breed/${query}/images/random`);\n  },\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { object, string, func } from \"prop-types\";\nimport upperCaseName from \"../../utils/upperCaseName\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Button = styled.button`\n  padding: 10px 5px;\n  border: 2px solid;\n  font-size: 16px;\n`;\n\nconst ImageWrapper = styled.div`\n  margin: auto;\n  margin-bottom: 10px;\n  width: 60%;\n  border: 3px solid black;\n  padding: 10px;\n`;\n\nconst Img = styled.img`\n  width: 100%;\n`;\n\nexport default function Card({ breed, onClick, message }) {\n  const { name, image } = breed;\n  return (\n    <Wrapper>\n      <h2>{upperCaseName(name)}</h2>\n      <ImageWrapper>\n        <Img src={image} alt={name} />\n      </ImageWrapper>\n      <Button type=\"button\" onClick={() => onClick({ name, image })}>\n        {message}\n      </Button>\n    </Wrapper>\n  );\n}\n\nCard.propTypes = {\n  breed: object.isRequired,\n  onClick: func.isRequired,\n  message: string.isRequired,\n};\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { arrayOf, func, object } from \"prop-types\";\nimport Card from \"../Card\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n`;\n\nexport default function Favorites({ favBreeds, onClick }) {\n  return (\n    <Wrapper>\n      {favBreeds.map((breed, index) => (\n        <Card\n          key={index}\n          breed={breed}\n          message=\"Remove breed\"\n          onClick={onClick}\n          inList\n        />\n      ))}\n    </Wrapper>\n  );\n}\n\nFavorites.propTypes = {\n  favBreeds: arrayOf(object).isRequired,\n  onClick: func.isRequired,\n};\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components/macro\";\nimport \"./App.css\";\nimport Search from \"./components/Search\";\nimport API from \"./utils/API\";\nimport getRandomIndex from \"./utils/getRandomIndex\";\nimport Card from \"./components/Card\";\nimport Favorites from \"./components/Favorites\";\n\nconst Section = styled.section`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst Panel = styled.div`\n  width: 40%;\n  height: 100vh;\n`;\n\nconst P = styled.p`\n  text-align: center;\n`;\n\nfunction App() {\n  const [query, setQuery] = useState({ name: \"\", image: \"\" });\n  const [breeds, setBreeds] = useState([]);\n  const [favBreeds, setFavBreeds] = useState([]);\n\n  useEffect(() => {\n    API.getBreeds().then(({ data }) => {\n      const breedsArr = Object.keys(data.message);\n      setBreeds(breedsArr);\n    });\n  }, []);\n\n  const handleOnChange = (e) => {\n    const breedName = e.target.value;\n    API.getBreed(breedName).then(({ data }) => {\n      setQuery({ name: breedName, image: data.message });\n    });\n  };\n\n  const addToFavs = (breed) => {\n    if (favBreeds.filter(({ name }) => name === breed.name).length !== 1) {\n      setFavBreeds([...favBreeds, breed]);\n    }\n  };\n\n  const removeFromFavs = (breed) => {\n    const updateFavs = favBreeds.filter(({ name }) => name !== breed.name);\n    setFavBreeds(updateFavs);\n  };\n\n  const randomBreed = () => {\n    const randomIndex = getRandomIndex(0, breeds.length - 1);\n    const breedName = breeds[randomIndex];\n    API.getBreed(breedName).then(({ data }) => {\n      setQuery({ name: breedName, image: data.message });\n    });\n  };\n\n  return (\n    <div>\n      <Search\n        onChange={handleOnChange}\n        query={query.name}\n        breeds={breeds}\n        randomBreed={randomBreed}\n      />\n      <Section>\n        <Panel>\n          {query.name && query.image && (\n            <Card\n              breed={query}\n              onChange={addToFavs}\n              onClick={addToFavs}\n              message=\"Add Breed to Favorites\"\n            />\n          )}\n        </Panel>\n        <Panel>\n          {favBreeds.length > 0 ? (\n            <Favorites favBreeds={favBreeds} onClick={removeFromFavs} />\n          ) : (\n            <P>You have no favorties at this time.</P>\n          )}\n        </Panel>\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","export default function getRandomIndex(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}